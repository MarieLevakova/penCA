// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// vecm
arma::mat vecm(arma::mat Z0, arma::mat Z1, int r, arma::mat A, arma::mat B, double dt, bool intercept, bool normalize);
RcppExport SEXP _penCA_vecm(SEXP Z0SEXP, SEXP Z1SEXP, SEXP rSEXP, SEXP ASEXP, SEXP BSEXP, SEXP dtSEXP, SEXP interceptSEXP, SEXP normalizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Z0(Z0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Z1(Z1SEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type dt(dtSEXP);
    Rcpp::traits::input_parameter< bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< bool >::type normalize(normalizeSEXP);
    rcpp_result_gen = Rcpp::wrap(vecm(Z0, Z1, r, A, B, dt, intercept, normalize));
    return rcpp_result_gen;
END_RCPP
}
// johansenCpp
arma::mat johansenCpp(arma::mat Z0, arma::mat Z1, int r, arma::mat A, arma::mat B, double dt, bool intercept, bool normalize);
RcppExport SEXP _penCA_johansenCpp(SEXP Z0SEXP, SEXP Z1SEXP, SEXP rSEXP, SEXP ASEXP, SEXP BSEXP, SEXP dtSEXP, SEXP interceptSEXP, SEXP normalizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Z0(Z0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Z1(Z1SEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type dt(dtSEXP);
    Rcpp::traits::input_parameter< bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< bool >::type normalize(normalizeSEXP);
    rcpp_result_gen = Rcpp::wrap(johansenCpp(Z0, Z1, r, A, B, dt, intercept, normalize));
    return rcpp_result_gen;
END_RCPP
}
// penreg_Rcpp
arma::vec penreg_Rcpp(arma::vec Y, arma::mat X, double lambda, arma::vec beta0, Rcpp::List control);
RcppExport SEXP _penCA_penreg_Rcpp(SEXP YSEXP, SEXP XSEXP, SEXP lambdaSEXP, SEXP beta0SEXP, SEXP controlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta0(beta0SEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type control(controlSEXP);
    rcpp_result_gen = Rcpp::wrap(penreg_Rcpp(Y, X, lambda, beta0, control));
    return rcpp_result_gen;
END_RCPP
}
// penreg_Rcpp_XY
arma::vec penreg_Rcpp_XY(arma::vec XY, arma::mat XX, double lambda, arma::vec beta0, Rcpp::List control);
RcppExport SEXP _penCA_penreg_Rcpp_XY(SEXP XYSEXP, SEXP XXSEXP, SEXP lambdaSEXP, SEXP beta0SEXP, SEXP controlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type XY(XYSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type XX(XXSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta0(beta0SEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type control(controlSEXP);
    rcpp_result_gen = Rcpp::wrap(penreg_Rcpp_XY(XY, XX, lambda, beta0, control));
    return rcpp_result_gen;
END_RCPP
}
// penAdaptNuclearCpp
arma::mat penAdaptNuclearCpp(arma::mat X, int n_lambda, double lambda_min, int crit, double dt, int n_cv, double w_gamma, double alpha);
RcppExport SEXP _penCA_penAdaptNuclearCpp(SEXP XSEXP, SEXP n_lambdaSEXP, SEXP lambda_minSEXP, SEXP critSEXP, SEXP dtSEXP, SEXP n_cvSEXP, SEXP w_gammaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type n_lambda(n_lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_min(lambda_minSEXP);
    Rcpp::traits::input_parameter< int >::type crit(critSEXP);
    Rcpp::traits::input_parameter< double >::type dt(dtSEXP);
    Rcpp::traits::input_parameter< int >::type n_cv(n_cvSEXP);
    Rcpp::traits::input_parameter< double >::type w_gamma(w_gammaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(penAdaptNuclearCpp(X, n_lambda, lambda_min, crit, dt, n_cv, w_gamma, alpha));
    return rcpp_result_gen;
END_RCPP
}
// penNuclearCpp
arma::mat penNuclearCpp(arma::mat X, int n_lambda, double lambda_min, int miniter, int maxiter, int crit, double dt, int n_cv, double thresh, double alpha);
RcppExport SEXP _penCA_penNuclearCpp(SEXP XSEXP, SEXP n_lambdaSEXP, SEXP lambda_minSEXP, SEXP miniterSEXP, SEXP maxiterSEXP, SEXP critSEXP, SEXP dtSEXP, SEXP n_cvSEXP, SEXP threshSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type n_lambda(n_lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_min(lambda_minSEXP);
    Rcpp::traits::input_parameter< int >::type miniter(miniterSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< int >::type crit(critSEXP);
    Rcpp::traits::input_parameter< double >::type dt(dtSEXP);
    Rcpp::traits::input_parameter< int >::type n_cv(n_cvSEXP);
    Rcpp::traits::input_parameter< double >::type thresh(threshSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(penNuclearCpp(X, n_lambda, lambda_min, miniter, maxiter, crit, dt, n_cv, thresh, alpha));
    return rcpp_result_gen;
END_RCPP
}
// penRankCpp
arma::mat penRankCpp(arma::mat X, int n_lambda, double lambda_min, int crit, double dt, int n_cv, double alpha);
RcppExport SEXP _penCA_penRankCpp(SEXP XSEXP, SEXP n_lambdaSEXP, SEXP lambda_minSEXP, SEXP critSEXP, SEXP dtSEXP, SEXP n_cvSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type n_lambda(n_lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_min(lambda_minSEXP);
    Rcpp::traits::input_parameter< int >::type crit(critSEXP);
    Rcpp::traits::input_parameter< double >::type dt(dtSEXP);
    Rcpp::traits::input_parameter< int >::type n_cv(n_cvSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(penRankCpp(X, n_lambda, lambda_min, crit, dt, n_cv, alpha));
    return rcpp_result_gen;
END_RCPP
}
// accu2
double accu2(arma::mat& obj);
RcppExport SEXP _penCA_accu2(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(accu2(obj));
    return rcpp_result_gen;
END_RCPP
}
// penPiCpp
arma::mat penPiCpp(arma::mat X, int n_lambda, double lambda_min, int r, int maxiter, int crit, double dt, bool w_auto, int n_cv, double q, arma::mat weights, double lambda_max);
RcppExport SEXP _penCA_penPiCpp(SEXP XSEXP, SEXP n_lambdaSEXP, SEXP lambda_minSEXP, SEXP rSEXP, SEXP maxiterSEXP, SEXP critSEXP, SEXP dtSEXP, SEXP w_autoSEXP, SEXP n_cvSEXP, SEXP qSEXP, SEXP weightsSEXP, SEXP lambda_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type n_lambda(n_lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_min(lambda_minSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< int >::type crit(critSEXP);
    Rcpp::traits::input_parameter< double >::type dt(dtSEXP);
    Rcpp::traits::input_parameter< bool >::type w_auto(w_autoSEXP);
    Rcpp::traits::input_parameter< int >::type n_cv(n_cvSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_max(lambda_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(penPiCpp(X, n_lambda, lambda_min, r, maxiter, crit, dt, w_auto, n_cv, q, weights, lambda_max));
    return rcpp_result_gen;
END_RCPP
}
// surr_fit_Rcpp
Rcpp::List surr_fit_Rcpp(arma::mat Y, arma::mat X, double lambda, arma::vec U0, arma::vec V0, arma::vec WU, arma::vec WV, arma::mat Xtran, Rcpp::List control, int n_cv);
RcppExport SEXP _penCA_surr_fit_Rcpp(SEXP YSEXP, SEXP XSEXP, SEXP lambdaSEXP, SEXP U0SEXP, SEXP V0SEXP, SEXP WUSEXP, SEXP WVSEXP, SEXP XtranSEXP, SEXP controlSEXP, SEXP n_cvSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type U0(U0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type V0(V0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type WU(WUSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type WV(WVSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Xtran(XtranSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type control(controlSEXP);
    Rcpp::traits::input_parameter< int >::type n_cv(n_cvSEXP);
    rcpp_result_gen = Rcpp::wrap(surr_fit_Rcpp(Y, X, lambda, U0, V0, WU, WV, Xtran, control, n_cv));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_penCA_vecm", (DL_FUNC) &_penCA_vecm, 8},
    {"_penCA_johansenCpp", (DL_FUNC) &_penCA_johansenCpp, 8},
    {"_penCA_penreg_Rcpp", (DL_FUNC) &_penCA_penreg_Rcpp, 5},
    {"_penCA_penreg_Rcpp_XY", (DL_FUNC) &_penCA_penreg_Rcpp_XY, 5},
    {"_penCA_penAdaptNuclearCpp", (DL_FUNC) &_penCA_penAdaptNuclearCpp, 8},
    {"_penCA_penNuclearCpp", (DL_FUNC) &_penCA_penNuclearCpp, 10},
    {"_penCA_penRankCpp", (DL_FUNC) &_penCA_penRankCpp, 7},
    {"_penCA_accu2", (DL_FUNC) &_penCA_accu2, 1},
    {"_penCA_penPiCpp", (DL_FUNC) &_penCA_penPiCpp, 12},
    {"_penCA_surr_fit_Rcpp", (DL_FUNC) &_penCA_surr_fit_Rcpp, 10},
    {NULL, NULL, 0}
};

RcppExport void R_init_penCA(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
